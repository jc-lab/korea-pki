package api

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/jc-lab/jclab-license/license_model"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *LicenseApplyParams) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "licenseCode":
			z.LicenseCode, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "LicenseCode")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z LicenseApplyParams) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "licenseCode"
	err = en.Append(0x81, 0xab, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.LicenseCode)
	if err != nil {
		err = msgp.WrapError(err, "LicenseCode")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z LicenseApplyParams) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "licenseCode"
	o = append(o, 0x81, 0xab, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendString(o, z.LicenseCode)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LicenseApplyParams) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "licenseCode":
			z.LicenseCode, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LicenseCode")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z LicenseApplyParams) Msgsize() (s int) {
	s = 1 + 12 + msgp.StringPrefixSize + len(z.LicenseCode)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ReturnLicenseInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "libraryLicenseVersion":
			z.LibraryLicenseVersion, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "LibraryLicenseVersion")
				return
			}
		case "libraryVersion":
			z.LibraryVersion, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "LibraryVersion")
				return
			}
		case "libraryCommitHash":
			z.LibraryCommitHash, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "LibraryCommitHash")
				return
			}
		case "libraryBuildTimestamp":
			z.LibraryBuildTimestamp, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "LibraryBuildTimestamp")
				return
			}
		case "licensesDocument":
			z.LicensesDocument, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "LicensesDocument")
				return
			}
		case "success":
			z.Success, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Success")
				return
			}
		case "errorMessage":
			z.ErrorMessage, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ErrorMessage")
				return
			}
		case "appliedLicense":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppliedLicense")
					return
				}
				z.AppliedLicense = nil
			} else {
				if z.AppliedLicense == nil {
					z.AppliedLicense = new(license_model.Claims)
				}
				err = z.AppliedLicense.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "AppliedLicense")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ReturnLicenseInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "libraryLicenseVersion"
	err = en.Append(0x88, 0xb5, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt(z.LibraryLicenseVersion)
	if err != nil {
		err = msgp.WrapError(err, "LibraryLicenseVersion")
		return
	}
	// write "libraryVersion"
	err = en.Append(0xae, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.LibraryVersion)
	if err != nil {
		err = msgp.WrapError(err, "LibraryVersion")
		return
	}
	// write "libraryCommitHash"
	err = en.Append(0xb1, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.LibraryCommitHash)
	if err != nil {
		err = msgp.WrapError(err, "LibraryCommitHash")
		return
	}
	// write "libraryBuildTimestamp"
	err = en.Append(0xb5, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = en.WriteString(z.LibraryBuildTimestamp)
	if err != nil {
		err = msgp.WrapError(err, "LibraryBuildTimestamp")
		return
	}
	// write "licensesDocument"
	err = en.Append(0xb0, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.LicensesDocument)
	if err != nil {
		err = msgp.WrapError(err, "LicensesDocument")
		return
	}
	// write "success"
	err = en.Append(0xa7, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Success)
	if err != nil {
		err = msgp.WrapError(err, "Success")
		return
	}
	// write "errorMessage"
	err = en.Append(0xac, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.ErrorMessage)
	if err != nil {
		err = msgp.WrapError(err, "ErrorMessage")
		return
	}
	// write "appliedLicense"
	err = en.Append(0xae, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65)
	if err != nil {
		return
	}
	if z.AppliedLicense == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.AppliedLicense.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "AppliedLicense")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ReturnLicenseInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "libraryLicenseVersion"
	o = append(o, 0x88, 0xb5, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendInt(o, z.LibraryLicenseVersion)
	// string "libraryVersion"
	o = append(o, 0xae, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.LibraryVersion)
	// string "libraryCommitHash"
	o = append(o, 0xb1, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendString(o, z.LibraryCommitHash)
	// string "libraryBuildTimestamp"
	o = append(o, 0xb5, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o = msgp.AppendString(o, z.LibraryBuildTimestamp)
	// string "licensesDocument"
	o = append(o, 0xb0, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.LicensesDocument)
	// string "success"
	o = append(o, 0xa7, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73)
	o = msgp.AppendBool(o, z.Success)
	// string "errorMessage"
	o = append(o, 0xac, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendString(o, z.ErrorMessage)
	// string "appliedLicense"
	o = append(o, 0xae, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65)
	if z.AppliedLicense == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.AppliedLicense.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "AppliedLicense")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ReturnLicenseInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "libraryLicenseVersion":
			z.LibraryLicenseVersion, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LibraryLicenseVersion")
				return
			}
		case "libraryVersion":
			z.LibraryVersion, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LibraryVersion")
				return
			}
		case "libraryCommitHash":
			z.LibraryCommitHash, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LibraryCommitHash")
				return
			}
		case "libraryBuildTimestamp":
			z.LibraryBuildTimestamp, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LibraryBuildTimestamp")
				return
			}
		case "licensesDocument":
			z.LicensesDocument, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LicensesDocument")
				return
			}
		case "success":
			z.Success, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Success")
				return
			}
		case "errorMessage":
			z.ErrorMessage, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ErrorMessage")
				return
			}
		case "appliedLicense":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppliedLicense = nil
			} else {
				if z.AppliedLicense == nil {
					z.AppliedLicense = new(license_model.Claims)
				}
				bts, err = z.AppliedLicense.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppliedLicense")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ReturnLicenseInfo) Msgsize() (s int) {
	s = 1 + 22 + msgp.IntSize + 15 + msgp.StringPrefixSize + len(z.LibraryVersion) + 18 + msgp.StringPrefixSize + len(z.LibraryCommitHash) + 22 + msgp.StringPrefixSize + len(z.LibraryBuildTimestamp) + 17 + msgp.StringPrefixSize + len(z.LicensesDocument) + 8 + msgp.BoolSize + 13 + msgp.StringPrefixSize + len(z.ErrorMessage) + 15
	if z.AppliedLicense == nil {
		s += msgp.NilSize
	} else {
		s += z.AppliedLicense.Msgsize()
	}
	return
}
